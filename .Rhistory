runApp('Desktop/testFlexTables')
install.packages("flextable")
runApp('Desktop/testFlexTables')
install.packages("dplyr")
runApp('Desktop/testFlexTables')
runApp('Desktop/testFlexTables')
source("BEDROCK-OUT.R")
#source("BEDROCK-HTML.R")
}
source('~/MyWork/Upwork/R_bedrock_gui/shinyapp/BEDROCK-LASSO_FUNC.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/shinyapp/BEDROCK-LASSO_FUNC.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
warnings()
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
warnings()
dataIn.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
trellis.par.set(caretTheme())
plot(train.enet)
y.hat.enet.scaled <- predict.enet(final.enet.model,
as.data.frame(x.test),
s=best.lambda,
type="fit",
mode="fraction")
y.hat.enet.scaled
y.hat.enet.scaled <- predict.enet(final.enet.model,
as.data.frame(x.test),
s=best.lambda,
type="prob",
mode="fraction")
densityplot(train.enet, pch = "|")
bootstrap.mod <- train(SellingPrice ~.,
data = bootstrap.data,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
bootstrap.mod <- train(SellingPrice ~.,
data = dataIn.scaled,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
bootstrap.mod
plot(boootstrap.mod)
plot(bootstrap.mod)
plot(bootstrap.mod)
bootstrap.mod$finalModel
coef(bootstrap.mod$finalModel)
coef(bootstrap.mod$finalModel, train.enet$bestTune$lambda)
coef(train.enet$finalModel, train.enet$bestTune$lambda)
predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$lambda,type="coefficient",mode="fraction")
as.vector(predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$lambda,type="coefficient",mode="fraction"))
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
bootstrap.mod <- train(SellingPrice ~.,
data = dataIn.scaled,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
as.vector(predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$lambda,type="coefficient",mode="fraction"))
as.vector(predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$lambda,type="coefficient",mode="fraction")$coefficients)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
boot.samples
str(boot.samples)
capture.output(boot.samples, file = "boot_out.txt")
dat <- read.table("boot_out.txt", skip=10)
dat
data <- as.matrix(cbind(beta.hat.scaled, as.matrix(df)))
data <- as.matrix(cbind(beta.hat.enent.scaled, as.matrix(df)))
data <- as.matrix(cbind(beta.hat.enet.scaled, as.matrix(df)))
data
data <- formatC(data, digits = 3, format = "f", flag = "0")
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
data <- as.matrix(cbind(beta.hat.enent.scaled, as.matrix(df)))
data <- as.matrix(cbind(beta.hat.enet.scaled, as.matrix(df)))
data
dat <- read.table("boot_out.txt", skip=10)
dat
df<- as.data.frame(dat)[,c("V4")]
df
data <- as.matrix(cbind(beta.hat.enet.scaled, as.matrix(df)))
beta.hat.enet.scaled
beta.hat.enet.scaled$coefficients
data <- as.matrix(cbind(beta.hat.enet.scaled$coefficients, as.matrix(df)))
data
data <- formatC(data, digits = 3, format = "f", flag = "0")
data
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
beta.hat.enet.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
cv.enet(x.scaled[1:(nrow(x.scaled)-1),],y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
cv.enet(x.scaled[1:(nrow(x.scaled)-1),],y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode = ="fraction",trace=TRUE,max.steps=80)
cv.enet(x.scaled[1:(nrow(x.scaled)-1),],y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
cv.enet(x.scaled[1:(nrow(x.scaled)-1),],y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
cv.enet(as.matrix(x.scaled[1:(nrow(x.scaled)-1),]),y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
cv=cv.enet(as.matrix(x.scaled[1:(nrow(x.scaled)-1),]),y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
plot(cv)
plotCVLars(cv)
plotCVLars(cv, se=TRUE)
plotCVLars(cv)
plotCVLars(cv, se=FALSE)
cv=cv.enet(as.matrix(x.scaled[1:(nrow(x.scaled)-1),]),y.scaled[[1]],lambda=0.05,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
cv
plot(cv$cv)
plot(cv$cv.error)
plot(cv$cv.error, cv$s)
plot(cv$cv, cv$s)
plot(cv$cv.error, cv$s)
cv=cv.enet(as.matrix(x.scaled[1:(nrow(x.scaled)-1),]),y.scaled[[1]],lambda=0.1,s=seq(0,1,length=100),mode="fraction",trace=TRUE,max.steps=80)
plot(cv$cv.error, cv$s)
plot(cv$s, cv$cv.error)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
boot.samples
boot.samples$t0
boot.samples$R
boot.samples$t
t.test[dataIn]
t.test(dataIn)
t.test(boot.samples$statistic())
boot.samples$R
boot.samples
boot.samples$weights
t.test(final.enet.model)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
best.fraction
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
.Machine$double.eps
?.Machine
any(dataIn<eps*sqrt(7))
eps=.Machine$double.eps
any(dataIn<eps*sqrt(7))
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
any(dataIn<eps*sqrt(7))
dim(dataIn)
dim(x.scaled)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
normx
dimx[2]
dimx
x
x.scaled
dimx[2]
rep(1,dimx[2])
normx
normx[, colSums(normx != 0) > 0]
str(normx
)
normx
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
normx
str(normx)
normx["MezzanineYes1"]
normx["SiteAreaSF"]
normx[,!0]
normx[,!NA]
normx[,!2]
normx[,normx<eps*sqrt(dim[1])]
normx
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
normx
?rep
x.scaled[, normx < eps*sqrt(dimx[1]))]
x.scaled[, normx < eps*sqrt(dimx[1])]
x.scaled
x.scaled[, normx < eps*sqrt(dimx[1])]
normx[, normx < eps*sqrt(dimx[1])]
rep(1,dimx[2])
normx
eps*sqrt(dimx[1])
any(normx<eps*sqrt(dimx[1]))
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
normx
any(normx<eps*sqrt(dimx[1]))
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
any(normx<eps*sqrt(dimx[1]))
normx
if(any(normx<eps*sqrt(dimx[1]))) print('stop')
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
normx
normx[,which]
normx[,which(normx<eps*sqrt(dimx[1]))]
normx<eps*sqrt(dimx[1])
str(normx)
normx["MezzanineYes1"]
normx["SiteAreaSF"]
normx["SiteAreaSF"]
normx
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
x.scaled[, "MezzainiyeYes1"]
x.scaled
x.scaled[,!"MezzanineYes1"]
x.scaled[,-1]
x.scaled[,1]
x.scaled[!(colnames(df) %in% c("MezzanineYes1"))]
x.scaled
t <- x.scaled[!(colnames(df) %in% c("MezzanineYes1"))]
t
t <- x.scaled[!(colnames(x.scaled) %in% c("MezzanineYes1"))]
t
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
x.saled
x.scaled
x
x.test
plot(train.enet)
beta.hat.enet.scaled
dataIn.scaled
y.hat.enet.scaled
y.hat.enet.unscaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled
x.names
names(dataIn.scaled)[1]
dataIn.scaled
names(dataIn.scaled)
names(dataIn.scaled)
dataIn.scaled
dataIn
names(as.matrix(dataIn.scaled)
)
names(as.data.frame(dataIn.scaled))
names(as.data.frame(dataIn.scaled))[1]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled
formula.lm
final.enet.model
dataIn.scaled
dataIn.scaled[1,]
t<-dataIn.scaled[1,]
bootstrap.mod <- train(SellingPrice ~.,
data = t,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
bootstrap.data <- dataIn.scaled[2, ]
bootstrap.mod <- train(SellingPrice ~.,
data = bootstrap.data,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn
dataIn.scaled
train.enet
dim(dataIn.scaled)
dim(x.scaled)
x.scaled
dataIn.scaled
dataIn
dataIn.scaled[-1,]
dataIn.scaled
x.scaled
x.scaled[1:(nrow(x.scaled)-1),]
dataIn.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
beta.hat.enet.scaled
dataIn.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
bootstrap.data <- dataIn.scaled[1, ]
bootstrap.data
bootstrap.mod <- train(SellingPrice ~.,
data = bootstrap.data,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
metric ="RMSE")
fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
fmla <- as.formula(formula.lm)
fmla
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
boot.samples
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
x.scaled
dataIn.scaled
x.test
cbind(y,x)
train.enet
beta.hat.enet.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
bootstrap.mod <- train(formula.lm,
data = bootstrap.data,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
bootstrap.mod <- train(formula.lm,
data = dataIn.scaled,
method = "enet",
trControl = trainControl(method = "none"),
tuneGrid = train.enet$bestTune,
metric ="RMSE")
bootstrap.mod
plot(bootstrap.mod)
redict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$fraction,
type="coefficient",mode="fraction")$coefficients)
}
predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$fraction,
type="coefficient",mode="fraction")$coefficients)
predict.enet(bootstrap.mod$finalModel,s=train.enet$bestTune$fraction,
type="coefficient",mode="fraction")$coefficients
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
boot.samples
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
train.enet$finalModel$param
train.enet$finalModel$allset
train.enet$finalModel$lambda
predict.enet(bootstrap.mod$finalModel,s=best.fraction,
type="coefficient",mode="fraction")
predict.enet(train.enet$finalModel,s=best.fraction,
type="coefficient",mode="fraction")
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
formula.lm
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled[1:nrow(dataIn.scaled)-1]
dataIn.scaled[1:(nrow(dataIn.scaled)-1)]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled[,1]
dataIn.scaled[[1]
]
dataIn.scaled[1,]
dataIn.scaled[,1]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1,drop=FALSE]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1,drop=FALSE]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled
dataIn.scaled[2:(nrow(dataIn.scaled)-1),]
dataIn.scaled[3:(nrow(dataIn.scaled)-1),]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled[1:(nrow(dataIn.scaled)-2),]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled[1:(nrow(dataIn.scaled)),]
dataIn.scaled[1:(nrow(dataIn.scaled)),1]
dataIn.scaled[1:(nrow(dataIn.scaled)),]
dataIn.scaled[1:(nrow(dataIn.scaled))-1,]
dataIn.scaled[2:(nrow(dataIn.scaled)),]
x.scaled
dataIn.scaled[1:(nrow(dataIn.scaled))-1,]
dataIn.scaled[,-1]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled[1:(nrow(dataIn.scaled)-1)]
dataIn.scaled[1:(nrow(dataIn.scaled)-1)],1
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
as.data.frame(dataIn.scaled[1:(nrow(dataIn.scaled)-1),])
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled[,1]
dataIn.scaled[,-1]
dataIn.scaled[1,]
dataIn.scaled[,dataIn.scaled[1:(nrow(dataIn.scaled)-1)]]
dataIn.scaled[,dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]
]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),]
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1,drop=FALSE]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
boot.samples
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
formula.lm
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
str(train.enet$finalModel)
dataIn.scaled[1:(nrow(dataIn.scaled)-1),1,drop=FALSE]
dataIn.scaled[,dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]
]
dataIn.scaled[,dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]
]
dataIn.scaled[,dataIn.scaled[1:(nrow(dataIn.scaled)-1),1]]
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
eps=.Machine$double.eps
dimx <- dim(x.scaled)
normx <- rep(1, dimx[2])
normx
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
outfileName
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
warnings()
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
source('~/MyWork/Upwork/R_bedrock_gui/RLassoEstimator/BEDROCK-ELASTICNET_LARS.R', echo=TRUE)
